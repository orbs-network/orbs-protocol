syntax = "proto3";
package client;
option go_package = "github.com/orbs-network/orbs-spec/types/go/protocol/client";

import "../primitives/crypto.proto";
import "../primitives/protocol.proto";
import "../protocol/transactions.proto";
import "../protocol/queries.proto";
import "../protocol/results.proto";
import "../protocol/contracts.proto";
import "../protocol/proofs.proto";
import "../protocol/blocks.proto";

message RequestResult {
    protocol.RequestStatus request_status = 1;
    primitives.block_height block_height = 2;
    primitives.timestamp_nano block_timestamp = 3;
}

message TransactionRef {
    primitives.protocol_version protocol_version = 1; // client protocol
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.timestamp_nano transaction_timestamp = 3;
    primitives.sha256 txhash = 4;
}

message SendTransactionRequest {
    protocol.SignedTransaction signed_transaction = 1;
}

message SendTransactionResponse {
    RequestResult request_result = 1;
    protocol.TransactionStatus transaction_status = 2;
    protocol.TransactionReceipt transaction_receipt = 3; // empty unless status committed or previously committed
}

message RunQueryRequest {
    protocol.SignedQuery signed_query = 1;
}

message RunQueryResponse {
    RequestResult request_result = 1;
    protocol.QueryResult query_result = 2;
}

message GetTransactionStatusRequest {
    TransactionRef transaction_ref = 1;
}

message GetTransactionStatusResponse {
    RequestResult request_result = 1;
    protocol.TransactionStatus transaction_status = 2;
    protocol.TransactionReceipt transaction_receipt = 3; // empty unless status committed or previously committed
}

message GetTransactionReceiptProofRequest {
    TransactionRef transaction_ref = 1;
}

message GetTransactionReceiptProofResponse {
    RequestResult request_result = 1;
    protocol.TransactionStatus transaction_status = 2;
    protocol.TransactionReceipt transaction_receipt = 3; // empty unless status committed or previously committed
    primitives.packed_receipt_proof packed_proof = 4;
}

message GetBlockRequest {
    primitives.protocol_version protocol_version = 1; // client protocol
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.block_height block_height = 3;
}

message GetBlockResponse {
    RequestResult request_result = 1;
    protocol.TransactionsBlockHeader transactions_block_header = 2;
    protocol.TransactionsBlockMetadata transactions_block_metadata = 3;
    repeated protocol.SignedTransaction signed_transactions = 4;
    protocol.TransactionsBlockProof transactions_block_proof = 5;
    protocol.ResultsBlockHeader results_block_header = 6;
    repeated protocol.TransactionReceipt transaction_receipts = 7;
    repeated protocol.ContractStateDiff contract_state_diffs = 8;
    protocol.ResultsBlockProof results_block_proof = 9;
}
