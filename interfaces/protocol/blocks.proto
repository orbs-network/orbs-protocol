syntax = "proto3";
package protocol;
option go_package = "github.com/orbs-network/orbs-spec/types/go/protocol";

import "primitives/crypto.proto";
import "primitives/protocol.proto";
import "protocol/transactions.proto";
import "protocol/contracts.proto";
import "protocol/consensus/lean_helix.proto";
import "protocol/consensus/benchmark_consensus.proto";

// containers (not serializable)

message BlockPairContainer {
    option serialize_message = false;

    TransactionsBlockContainer transactions_block = 1;
    ResultsBlockContainer results_block = 2;
}

message TransactionsBlockContainer {
    option serialize_message = false;

    TransactionsBlockHeader header = 1;
    TransactionsBlockMetadata metadata = 2;
    repeated protocol.SignedTransaction signed_transactions = 3;
    TransactionsBlockProof block_proof = 4;
}

message ResultsBlockContainer {
    option serialize_message = false;

    ResultsBlockHeader header = 1;
    repeated protocol.TransactionReceipt transaction_receipts = 2;
    repeated protocol.ContractStateDiff contract_state_diffs = 3;
    ResultsBlockProof block_proof = 4;
}

// payloads

message TransactionsBlockHeader {
    primitives.protocol_version protocol_version = 1; // governance PV
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.block_height block_height = 3;
    primitives.sha256 prev_block_hash_ptr = 4; // primitives.sha256(TransactionBlockHeader)
    primitives.timestamp_nano timestamp = 5;
    primitives.sha256 transactions_merkle_root_hash = 6;
    primitives.sha256 metadata_hash = 7;
    uint32 num_signed_transactions = 8;
    primitives.node_address block_proposer_address = 9;
    primitives.timestamp_seconds reference_time = 10;
}

message ResultsBlockHeader {
    primitives.protocol_version protocol_version = 1; // governance PV
    primitives.virtual_chain_id virtual_chain_id = 2;
    primitives.block_height block_height = 3;
    primitives.sha256 prev_block_hash_ptr = 4; // primitives.sha256(ResultsBlockHeader)
    primitives.timestamp_nano timestamp = 5;
    primitives.sha256 receipts_merkle_root_hash = 6;
    primitives.sha256 state_diff_hash = 7;
    primitives.sha256 transactions_block_hash_ptr = 8;
    primitives.sha256 pre_execution_state_merkle_root_hash = 9;
    uint32 num_transaction_receipts = 10;
    uint32 num_contract_state_diffs = 11;
    primitives.node_address block_proposer_address = 12;
    primitives.timestamp_seconds reference_time = 13;
}

message TransactionsBlockMetadata {
    // TODO: complete me
    // uint32 version = 1;
    // repeated uint32 nodes_reputation = 2;
}

message TransactionsBlockProof {
    primitives.sha256 results_block_hash = 1;
    oneof type {
        consensus.BenchmarkConsensusBlockProof benchmark_consensus = 2;
        primitives.lean_helix_block_proof lean_helix = 3;
    }
}

message ResultsBlockProof {
    primitives.sha256 transactions_block_hash = 1;
    oneof type {
        consensus.BenchmarkConsensusBlockProof benchmark_consensus = 2;
        primitives.lean_helix_block_proof lean_helix = 3;
    }
}

enum BlockType {
    BLOCK_TYPE_RESERVED = 0;
    BLOCK_TYPE_BLOCK_PAIR = 1;
    BLOCK_TYPE_TRANSACTIONS_BLOCK = 2;
    BLOCK_TYPE_RESULTS_BLOCK = 3;
}
